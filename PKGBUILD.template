# Maintainer : Ivan Podmazov <ivanpzv [eight] at gmail com>

pkgname=dot-files-@@@@@
pkgdesc="Auto-managed dot-files (@@@@@)"
arch=('any')
license=('Unlicense')
depends=(coreutils sudo)

pkgver=1
pkgrel=1
pkgver ()
{
    date +'%Y.%m.%d'
}

install=dot-files.install

prepare ()
{
    : ${DOT_FILES_DIR:="../content"}

    # check dot-files directory existence
    [ -d "$DOT_FILES_DIR" ] || { echo "DOT_FILES_DIR is not a directory"; exit 1; }

    # copy configuration to $srcdir
    echo "" > "$srcdir/install"
    echo "" > "$srcdir/reinstall_pre"
    echo "" > "$srcdir/reinstall_post"
    echo "" > "$srcdir/uninstall"
    echo "" > "$srcdir/update"

    IFS=$'\n'
    for group in $(find "$DOT_FILES_DIR" -mindepth 1 -maxdepth 1 -type d \! -name ".*" | sort)
    do
        for config in $(find "$group" -mindepth 1 -maxdepth 1 -type d \! -name ".*" | sort)
        do
            for dir in $(find "$config" -mindepth 1 -maxdepth 1 -type d \! -name ".*")
            do
                cp -Lfr --preserve=mode  -t "$srcdir" -- "$dir"
            done

            [ -f "$config/install" ] && cat -- "$config/install" >> "$srcdir/install"
            [ -f "$config/reinstall_pre" ] && cat -- "$config/reinstall_pre" >> "$srcdir/reinstall_pre"
            [ -f "$config/reinstall_post" ] && cat -- "$config/reinstall_post" >> "$srcdir/reinstall_post"
            [ -f "$config/uninstall" ] && cat -- "$config/uninstall" >> "$srcdir/uninstall"
            [ -f "$config/update" ] && cat -- "$config/update" >> "$srcdir/update"
        done
    done

    # prepare package
    : ${DOT_FILES_PKG_PREPARE:="../.pkg_prepare.sh"}
    "$DOT_FILES_PKG_PREPARE"
}

package ()
{
    DOT_FILES_DIR="/usr/share/$pkgname"
    REGISTRY_DIR="/var/lib/$pkgname/users"
    SCRIPT_FILE="$pkgname.sh"

    # create package tree
    mkdir -p -- "$pkgdir/$DOT_FILES_DIR"
    mkdir -p -- "$pkgdir/usr/bin"
    mkdir -p -- "$pkgdir/$REGISTRY_DIR"

    chmod 1773 -- "$pkgdir/$REGISTRY_DIR"

    # generate dot-files installation/uninstallation script beginning
    cat << EOF > "$pkgdir/usr/bin/$SCRIPT_FILE"
#!/bin/sh

cd

DOT_FILES_DIR=$(printf "%q" "$DOT_FILES_DIR") # directory where dot-files are stored
REGISTRY_DIR=$(printf "%q" "$REGISTRY_DIR") # registry of users who installed the dot-files

OP="\$1" # operation to do
OP_ARG="\$2" # operation argument

display_usage ()
{
    echo "Usage:" 1>&2
    echo "\$0 {install|reinstall|uninstall|update|status}" 1>&2
    echo 1>&2
}

# check operation applicability for the user
user_registered ()
{
    [ -f "\$REGISTRY_DIR/\$(id -u)" ]
}

register_user ()
{
    touch "\$REGISTRY_DIR/\$(id -u)"
}

unregister_user ()
{
    rm -f "\$REGISTRY_DIR/\$(id -u)"
}

case "\$OP" in
    status)
        if user_registered
        then
            echo "Dot-files are installed for user '\$(id -un)'." 1>&2
            exit
        else
            echo "Dot-files are not installed for user '\$(id -un)'." 1>&2
            exit 1
        fi
        ;;

    install)
        if user_registered
        then
            echo "Cannot \$OP: $pkgname are already installed for user '\$(id -un)'." 1>&2
            exit 1
        fi
        ;;

    reinstall|uninstall|update)
        if ! user_registered
        then
            echo "Cannot \$OP: $pkgname are not yet installed for user '\$(id -un)'." 1>&2
            exit 1
        fi
        ;;

    *)
        display_usage
        [ -z "\$OP" ]
        exit \$?
esac

# ensure XDG base directory variables have values
: \${XDG_CONFIG_HOME:="\$HOME/.config"}
: \${XDG_CACHE_HOME:="\$HOME/.cache"}
: \${XDG_DATA_HOME:="\$HOME/.local/share"}
: \${XDG_STATE_HOME:="\$HOME/.local/state"}
: \${USER_BINARY_DIR:="\$HOME/.local/bin"}

export XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_STATE_HOME USER_BINARY_DIR

# unsure used path variables have values
for env in \$(cat << '////'
EOF
    IFS=$'\n'
    for dir in $(find . -mindepth 1 -maxdepth 1 -type d \! -name ".*" -printf '%P\n' | sort)
    do
        echo "$dir" >> "$pkgdir/usr/bin/$SCRIPT_FILE"
    done
    cat << EOF >> "$pkgdir/usr/bin/$SCRIPT_FILE"
////
    )
do
    if [ -z "\$(sh -c "echo \"\\\$\$env\"")" ]
    then
        echo "Error [\$OP]: required path variable \\\$\$env is unset or null" 1>&2
        exit 1
    fi
done

# auxilliary functions
get_real_path ()
{
    if echo "\$1" | grep -q "/"
    then
        local VAR_NAME="\${1%%/*}"
        local RELATIVE_PATH="/\${1#*/}"
    else
        local VAR_NAME="\$1"
        local RELATIVE_PATH=
    fi

    local BASE_DIR="\$(sh -c "echo \"\\\$\$VAR_NAME\"")"
    if [ -z "\$BASE_DIR" ]
    then
        echo "Error [\$OP]: required path variable \$VAR_NAME is unset or null" 1>&2
        exit 1
    fi

    echo "\$BASE_DIR\$RELATIVE_PATH"
}

# process a file
process_file ()
{
    local REAL_PATH="\$(get_real_path "\$1")"
    local REAL_PATH_DIR="\$(dirname "\$REAL_PATH")"

    case "\$OP" in
        check_install)
            if [ -e "\$REAL_PATH" ]
            then
                echo "Error [\$OP]: file \$1 conflicts with destination at \$REAL_PATH" 1>&2
                exit 1
            fi
            ;;

        check_uninstall)
            if [ -e "\$REAL_PATH" -a ! -O "\$REAL_PATH" ]
            then
                echo "Error [\$OP]: file \$REAL_PATH is not owned by the user" 1>&2
                exit 1
            fi
            ;;

        install)
            if ! mkdir -pv -- "\$REAL_PATH_DIR"
            then
                echo "Error [\$OP]: failed to create directory \$REAL_PATH_DIR" 1>&2
                exit 1
            fi

            if ! cp -nTv --preserve=mode -- "\$DOT_FILES_DIR/\$1" "\$REAL_PATH"
            then
                echo "Error [\$OP]: failed to copy file \$1 to \$REAL_PATH" 1>&2
                exit 1
            fi
            ;;

        uninstall)
            if [ -e "\$REAL_PATH" ] && ! rm -fv -- "\$REAL_PATH"
            then
                echo "Error [\$OP]: failed to remove file \$REAL_PATH" 1>&2
                exit 1
            fi
            ;;
    esac
}

# process a directory
pre_process_directory ()
{
    local REAL_PATH="\$(get_real_path "\$1")"

    case "\$OP" in
        install)
            if ! mkdir -pv -- "\$REAL_PATH"
            then
                echo "Error [\$OP]: failed to create directory \$REAL_PATH" 1>&2
                exit 1
            fi
            ;;
    esac
}

post_process_directory ()
{
    local REAL_PATH="\$(get_real_path "\$1")"

    case "\$OP" in
        uninstall)
            rmdir -pv -- "\$REAL_PATH"
            ;;
    esac
}

# get list of all files
get_file_list ()
{
    cat << '////'
EOF
    chmod 755 -- "$pkgdir/usr/bin/$SCRIPT_FILE"

    # copy configuration to $pkgdir and generate list of files
    for dir in $(find . -mindepth 1 -maxdepth 1 -type d \! -name ".*" | sort)
    do
        cp -Lnr --preserve=mode  -t "$pkgdir/$DOT_FILES_DIR" "$dir"

        for file in $(find "$dir" -type f | sort)
        do
            echo "${file#./}" >> "$pkgdir/usr/bin/$SCRIPT_FILE"
        done
    done

    # generate dot-files installation/uninstallation script ending and custom instructions
    cat << EOF >> "$pkgdir/usr/bin/$SCRIPT_FILE"
////
}

# process all files from the list
process_all ()
{
    for dir in \$(get_file_list | xargs -d\\\\n -n1 -r dirname -- | sort | uniq)
    do
        pre_process_directory "\$dir"
    done

    for file in \$(get_file_list)
    do
        process_file "\$file"
    done

    for dir in \$(get_file_list | xargs -d\\\\n -n1 -r dirname -- | sort | uniq)
    do
        post_process_directory "\$dir"
    done
}

custom_install_instructions ()
{
EOF
    cat "install" 2> /dev/null >> "$pkgdir/usr/bin/$SCRIPT_FILE"
    cat << EOF >> "$pkgdir/usr/bin/$SCRIPT_FILE"
:;}

custom_pre_reinstall_instructions ()
{
EOF
    cat "reinstall_pre" 2> /dev/null >> "$pkgdir/usr/bin/$SCRIPT_FILE"
    cat << EOF >> "$pkgdir/usr/bin/$SCRIPT_FILE"
:;}

custom_post_reinstall_instructions ()
{
EOF
    cat "reinstall_post" 2> /dev/null >> "$pkgdir/usr/bin/$SCRIPT_FILE"
    cat << EOF >> "$pkgdir/usr/bin/$SCRIPT_FILE"
:;}

custom_uninstall_instructions ()
{
EOF
    cat "uninstall" 2> /dev/null >> "$pkgdir/usr/bin/$SCRIPT_FILE"
    cat << EOF >> "$pkgdir/usr/bin/$SCRIPT_FILE"
:;}

custom_update_instructions ()
{
EOF
    cat "update" 2> /dev/null >> "$pkgdir/usr/bin/$SCRIPT_FILE"
    cat << EOF >> "$pkgdir/usr/bin/$SCRIPT_FILE"
:;}

echo "Performing operation '\$OP\${OP_ARG:+" "}\$OP_ARG' for user \$(id -un)"

case "\$OP" in
    install)
        if [ "\$OP_ARG" ]
        then
            echo "Cannot \$OP: unknown operation argument '\$OP_ARG'" 1>&2
            exit 1
        fi

        OP=check_install process_all
        OP=install process_all
        custom_install_instructions
        register_user
        ;;

    reinstall)
        if [ -n "\$OP_ARG" -a "\$OP_ARG" != "pre" -a "\$OP_ARG" != "post" ]
        then
            echo "Cannot \$OP: unknown operation argument '\$OP_ARG'" 1>&2
            exit 1
        fi

        if [ -z "\$OP_ARG" -o "\$OP_ARG" = "pre" ]
        then
            OP=check_uninstall process_all
            custom_pre_reinstall_instructions
            OP=uninstall process_all
        fi

        if [ -z "\$OP_ARG" -o "\$OP_ARG" = "post" ]
        then
            OP=check_install process_all
            OP=install process_all
            custom_post_reinstall_instructions
        fi
        ;;

    uninstall)
        if [ "\$OP_ARG" ]
        then
            echo "Cannot \$OP: unknown operation argument '\$OP_ARG'" 1>&2
            exit 1
        fi

        OP=check_uninstall process_all
        unregister_user
        custom_uninstall_instructions
        OP=uninstall process_all
        ;;

    update)
        if [ "\$OP_ARG" ]
        then
            echo "Cannot \$OP: unknown operation argument '\$OP_ARG'" 1>&2
            exit 1
        fi

        custom_update_instructions
        ;;
esac

echo "Operation '\$OP\${OP_ARG:+" "}\$OP_ARG' for user \$(id -un) performed successfully!"

EOF
}

